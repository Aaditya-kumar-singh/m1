# -*- coding: utf-8 -*-
"""Project2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1svyUKeE7XXZELmBKy0zJ6oTsmnOBCvk3
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

economicofscale = pd.read_csv('https://github.com/ybifoundation/Dataset/raw/main/Economy%20of%20Scale.csv')

economicofscale.head()

economicofscale.info()

economicofscale.describe()

sns.pairplot(economicofscale)

sns.lineplot(data=economicofscale['Units'])

sns.lineplot(data=economicofscale['Cost'])

y = economicofscale['Cost']
X = economicofscale[['Units']]

X.shape

y.shape

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y,random_state =2529)

from sklearn.linear_model import LinearRegression
regmodel = LinearRegression()

regmodel.fit(X_train, y_train)

regmodel.intercept_

regmodel.coef_

fig,ax = plt.subplots()
ax.scatter(X_train, y_train, color = 'red')
ax.scatter(X_train, regmodel.predict(X_train), color = 'blue')
ax.set_ylabel('Cost Per Unit Sold [dollars]')
ax.set_xlabel('Number of Units [in Millions]')
ax.set_title('Unit Cost vs. Number of Units [in Millions](Training dataset)')

from sklearn.preprocessing import PolynomialFeatures

poly_regressor = PolynomialFeatures(degree=2)

X_poly = poly_regressor.fit_transform(X)

print(X_poly)

X_poly.shape

Xp_train, Xp_test, yp_train, yp_test = train_test_split(X_poly,y,random_state =2529)

regpoly = LinearRegression()

regpoly.fit(Xp_train, yp_train)

regpoly.intercept_

regpoly.coef_

fig,ax = plt.subplots()
ax.scatter(X_train, y_train, color = 'red')
ax.scatter(X_train, regpoly.predict(Xp_train), color = 'blue')
ax.set_ylabel('Cost Per Unit Sold [dollars]')
ax.set_xlabel('Number of Units [in Millions]')
ax.set_title('Unit Cost vs. Number of Units [in Millions](Training dataset)')

yp_pred= regpoly.predict(Xp_test)

from sklearn.metrics import r2_score, mean_absolute_percentage_error

mean_absolute_percentage_error(yp_test, yp_pred)

r2_score(yp_test, yp_pred)